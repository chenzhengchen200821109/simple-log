#ifndef THREADPOOL_H
#define THREADPOOL_H

#include "Condition.h"
#include "Mutex.h"
#include "Thread.h"
#include "Types.h"
#include <functional>
#include "NonCopyable.h"
#include <vector>
#include <memory>
#include <deque>
#include <atomic>

namespace muduo
{

class ThreadPool : public noncopyable
{
    public:
        typedef std::function<void ()> Task;

        explicit ThreadPool(const string& nameArg = string("ThreadPool"));
        ~ThreadPool();

        // Must be called before start().
        void setMaxQueueSize(int maxSize) { maxQueueSize_ = maxSize; }
        void setThreadInitCallback(const Task& cb) { threadInitCallback_ = cb; }

        void start(int numThreads);
        void stop();

        const string& name() const { return name_; }

        size_t queueSize() const;

        // Could block if maxQueueSize > 0
        void execute(const Task& f);

    private:
        bool isFull() const;
        void runInThread();
        Task take();
        void start();

        mutable MutexLock mutex_;
        Condition notEmpty_;
        Condition notFull_;

        string name_;
        Task threadInitCallback_;
        std::vector<std::shared_ptr<muduo::Thread>> threads_;
        std::deque<Task> queue_;
        size_t maxQueueSize_;
        bool running_;
};

} // namespace muduo

#endif
