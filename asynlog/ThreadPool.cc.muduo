#include "ThreadPool.h"
//#include "Exception.h"
#include <assert.h>
#include <stdio.h>
#include <algorithm>
#include <functional>

using namespace muduo;
using namespace std::placeholders;

ThreadPool::ThreadPool(const string& nameArg) : mutex_(), notEmpty_(mutex_), notFull_(mutex_), name_(nameArg), maxQueueSize_(0), running_(false)
{

}

ThreadPool::~ThreadPool()
{
    if (running_) {
        stop();
    }
}

// how many threads we need for a thread pool
void ThreadPool::start(int numThreads)
{
    assert(threads_.empty()); // thread pool is empty 
    running_ = true;
    threads_.reserve(numThreads);
    for (int i = 0; i < numThreads; ++i) {
        char id[32];
        snprintf(id, sizeof id, "%d", i+1);
        std::shared_ptr<muduo::Thread> elem(new muduo::Thread(std::bind(&ThreadPool::runInThread, this), name_ + id));
        threads_.push_back(elem);
        threads_[i]->start();
        printf("tid = %d\n", threads_[i]->tid());
    }
    if (numThreads == 0 && threadInitCallback_) {//
        threadInitCallback_();
    }
}

void ThreadPool::stop()
{
    {
        MutexLockGuard lock(mutex_);
        running_ = false;
        // shall unlock all threads currently blocked on the specified condition vavriable
        notEmpty_.notifyAll();
    }
    std::for_each(threads_.begin(), threads_.end(), std::bind(&muduo::Thread::join, _1));
}

size_t ThreadPool::queueSize() const
{
    MutexLockGuard lock(mutex_);
    return queue_.size();
}

// This is the only interface needed for users
// clients submit a new task
// the task queue is empty or full
void ThreadPool::execute(const Task& task)
{
    if (threads_.empty()) { // this means numThreads is set to zero
        task();
        printf("got here\n");
    }
    else {
        MutexLockGuard lock(mutex_);
        while (isFull()) {
            notFull_.wait(); // block
        }
        assert(!isFull());
        queue_.push_back(task);
        notEmpty_.notify();
    }
}

// take out a task from the thread pool. If it is empty, block and wait. 
// Otherwise take out a task and signal
/* ------ This is a private member function ------ */
ThreadPool::Task ThreadPool::take()
{
    MutexLockGuard lock(mutex_);
    // always use a while-loop, due to spurious wakeup
    while (queue_.empty() && running_) { // the task queue is empty, wait
        notEmpty_.wait();
    }
    Task task;
    if (!queue_.empty()) {
        task = queue_.front();
        queue_.pop_front();
        if (maxQueueSize_ > 0) {
            notFull_.notify(); // accept new task
        }
    }
    return task;
}

// the task queue is full
bool ThreadPool::isFull() const
{
    mutex_.assertLocked();
    MutexLockGuard lock(mutex_);
    return maxQueueSize_ > 0 && queue_.size() >= maxQueueSize_;
}

void ThreadPool::runInThread()
{
    try {
        if (threadInitCallback_) {
            threadInitCallback_();
        }
        while (running_) {
            Task task(take());
            if (task) {
                task();
            }
        }
    }
    //catch (const Exception& ex) {
    //    fprintf(stderr, "exception caught in ThreadPool %s\n", name_.c_str());
    //    fprintf(stderr, "reason: %s\n", ex.what());
    //    fprintf(stderr, "stack trace: %s\n", ex.stackTrace());
    //    abort();
    //}
    catch (const std::exception& ex) {
        fprintf(stderr, "exception caught in ThreadPool %s\n", name_.c_str());
        fprintf(stderr, "reason: %s\n", ex.what());
        abort();
    }
    catch (...) {
        fprintf(stderr, "unknown exception caught in ThreadPool %s\n", name_.c_str());
        throw; // rethrow
    }
}

